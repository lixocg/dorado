package com.experian.daas.litigation.config;

import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

import javax.sql.DataSource;

import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.session.SqlSessionFactory;
import org.mybatis.spring.SqlSessionFactoryBean;
import org.mybatis.spring.mapper.MapperScannerConfigurer;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Primary;
import org.springframework.core.io.support.PathMatchingResourcePatternResolver;
import org.springframework.jdbc.datasource.DataSourceTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import com.alibaba.druid.pool.DruidDataSourceFactory;
import com.experian.core.sharding.plugin.ShardPlugin;
import com.experian.core.sharding.sqlsessiontemplate.CustomSqlSessionTemplate;
import com.experian.core.sharding.sqlsessiontemplate.CustomerContextHolder;
import com.experian.core.tx.ChainedTransactionManager;
import com.github.pagehelper.PageHelper;

/**
 * mybatis配置
 * 
 * @author lixiongcheng
 *
 */
@Configuration
@EnableTransactionManagement
public class MyBatisConfig {

	// >>>>>>>>>>>>>>>>>>>>>第一个数据源开始<<<<<<<<<<<<<<<<<<<<
	@Bean
	public DataSource db1DataSource() throws Exception {
		Properties props = new Properties();
		props.put("driverClassName", "com.ibm.db2.jcc.DB2Driver");
		props.put("url", "jdbc:db2://10.157.211.58:50000/CCSDDB1");
		props.put("username", "erp");
		props.put("password", "CcSerp123");
		return DruidDataSourceFactory.createDataSource(props);
	}

	@Bean
	public SqlSessionFactoryBean db1SqlSessionFactoryBean(@Qualifier("db1DataSource") DataSource dataSource)
			throws Exception {
		SqlSessionFactoryBean fb = new SqlSessionFactoryBean();
		fb.setDataSource(dataSource);
		fb.setMapperLocations(
				new PathMatchingResourcePatternResolver().getResources("classpath*:com/experian/**/dao/xml/*.xml"));
		fb.setConfigLocation(
				new PathMatchingResourcePatternResolver().getResource("classpath:mybatis/mybatisConfig.xml"));
		// 添加插件
		fb.setPlugins(new Interceptor[] { pageHelper(), new ShardPlugin() });
		return fb;
	}

	@Bean
	public DataSourceTransactionManager db1TransactionManager(@Qualifier("db1DataSource") DataSource dataSource)
			throws Exception {
		return new DataSourceTransactionManager(dataSource);
	}

	// >>>>>>>>>>>>>>>>>>>>>第一个数据源结束<<<<<<<<<<<<<<<<<<<<

	// >>>>>>>>>>>>>>>>>>>>>第二个数据源开始<<<<<<<<<<<<<<<<<<<<
	/**
	 * 第二个数据源
	 * 
	 * @return
	 * @throws Exception
	 */
	@Bean
	DataSource db2DataSource() throws Exception {
		Properties props = new Properties();
		props.put("driverClassName", "com.ibm.db2.jcc.DB2Driver");
		props.put("url", "jdbc:db2://10.157.211.58:50000/SBIDDB1");
		props.put("username", "erp");
		props.put("password", "CcSerp123");
		return DruidDataSourceFactory.createDataSource(props);
	}

	@Bean
	public SqlSessionFactoryBean db2SqlSessionFactoryBean(@Qualifier("db2DataSource") DataSource dataSource)
			throws Exception {
		SqlSessionFactoryBean fb = new SqlSessionFactoryBean();
		fb.setDataSource(dataSource);
		fb.setMapperLocations(
				new PathMatchingResourcePatternResolver().getResources("classpath*:com/experian/**/dao/xml/*.xml"));
		fb.setConfigLocation(
				new PathMatchingResourcePatternResolver().getResource("classpath:mybatis/mybatisConfig.xml"));
		fb.setPlugins(new Interceptor[] { pageHelper(), new ShardPlugin() });
		return fb;
	}

	@Bean
	public DataSourceTransactionManager db2TransactionManager(@Qualifier("db2DataSource") DataSource dataSource)
			throws Exception {
		return new DataSourceTransactionManager(dataSource);
	}

	// >>>>>>>>>>>>>>>>>>>>>第二个数据源结束<<<<<<<<<<<<<<<<<<<<

	// >>>>>>>>>>>>>>>>>>>>>第三个数据源开始<<<<<<<<<<<<<<<<<<<<
	/**
	 * 第三个数据源
	 * 
	 * @return
	 * @throws Exception
	 */
	@Bean
	DataSource db3DataSource() throws Exception {
		Properties props = new Properties();
		props.put("driverClassName", "com.microsoft.sqlserver.jdbc.SQLServerDriver");
		props.put("url", "jdbc:sqlserver://10.157.211.38:1433;databaseName=litigation");
		props.put("username", "litigation");
		props.put("password", "123");
		return DruidDataSourceFactory.createDataSource(props);
	}

	@Bean
	public SqlSessionFactoryBean db3SqlSessionFactoryBean(@Qualifier("db3DataSource") DataSource dataSource)
			throws Exception {
		SqlSessionFactoryBean fb = new SqlSessionFactoryBean();
		fb.setDataSource(dataSource);
		fb.setMapperLocations(
				new PathMatchingResourcePatternResolver().getResources("classpath*:com/experian/**/dao/xml/*.xml"));
		fb.setConfigLocation(
				new PathMatchingResourcePatternResolver().getResource("classpath:mybatis/mybatisConfig.xml"));
		fb.setPlugins(new Interceptor[] { pageHelper(), new ShardPlugin() });
		return fb;
	}

	@Bean
	public DataSourceTransactionManager db3TransactionManager(@Qualifier("db3DataSource") DataSource dataSource)
			throws Exception {
		return new DataSourceTransactionManager(dataSource);
	}

	// >>>>>>>>>>>>>>>>>>>>>第三个数据源结束<<<<<<<<<<<<<<<<<<<<

	// >>>>>>>>>>>>>>>>>>>>>第四个数据源开始<<<<<<<<<<<<<<<<<<<<
	/**
	 * 第四个数据源
	 * 
	 * @return
	 * @throws Exception
	 */
	@Bean
	@Primary
	DataSource db4DataSource() throws Exception {
		Properties props = new Properties();
		props.put("driverClassName", "org.postgresql.Driver");
		props.put("url", "jdbc:postgresql://10.157.211.43:5432/daas");
		props.put("username", "postgres");
		props.put("password", "root");
		return DruidDataSourceFactory.createDataSource(props);
	}

	@Bean
	public SqlSessionFactoryBean db4SqlSessionFactoryBean(@Qualifier("db4DataSource") DataSource dataSource)
			throws Exception {
		SqlSessionFactoryBean fb = new SqlSessionFactoryBean();
		fb.setDataSource(dataSource);
		fb.setMapperLocations(
				new PathMatchingResourcePatternResolver().getResources("classpath*:com/experian/**/dao/xml/*.xml"));
		fb.setConfigLocation(
				new PathMatchingResourcePatternResolver().getResource("classpath:mybatis/mybatisConfig.xml"));
		fb.setPlugins(new Interceptor[] { pageHelper(), new ShardPlugin() });
		return fb;
	}

	@Bean
	public DataSourceTransactionManager db4TransactionManager(@Qualifier("db4DataSource") DataSource dataSource)
			throws Exception {
		return new DataSourceTransactionManager(dataSource);
	}

	// >>>>>>>>>>>>>>>>>>>>>第四个数据源结束<<<<<<<<<<<<<<<<<<<<

	/**
	 * 多数据源事物管理器
	 * 
	 * @param dtm1
	 * @param dtm2
	 * @return
	 */
	@Bean
	@Primary
	public ChainedTransactionManager chainedTransactionManager(
			@Qualifier("db1TransactionManager") DataSourceTransactionManager dtm1,
			@Qualifier("db2TransactionManager") DataSourceTransactionManager dtm2,
			@Qualifier("db3TransactionManager") DataSourceTransactionManager dtm3,
			@Qualifier("db4TransactionManager") DataSourceTransactionManager dtm4) {
		return new ChainedTransactionManager(dtm1, dtm2, dtm3, dtm4);
	}

	/**
	 * customSqlSessionTemplate 配置
	 * 
	 * @param sfb1
	 * @param sfb2
	 * @return
	 * @throws Exception
	 */
	@Bean(name = "customSqlSessionTemplate")
	public CustomSqlSessionTemplate customSqlSessionTemplate(
			@Qualifier("db1SqlSessionFactoryBean") SqlSessionFactoryBean sfb1,
			@Qualifier("db2SqlSessionFactoryBean") SqlSessionFactoryBean sfb2,
			@Qualifier("db3SqlSessionFactoryBean") SqlSessionFactoryBean sfb3,
			@Qualifier("db4SqlSessionFactoryBean") SqlSessionFactoryBean sfb4) throws Exception {
		CustomSqlSessionTemplate cst = new CustomSqlSessionTemplate(sfb1.getObject());
		Map<Object, SqlSessionFactory> targetSqlSessionFactorys = new HashMap<Object, SqlSessionFactory>();
		targetSqlSessionFactorys.put(CustomerContextHolder.DB2_CREDIT, sfb1.getObject());
		targetSqlSessionFactorys.put(CustomerContextHolder.DB2_CENTER, sfb2.getObject());
		targetSqlSessionFactorys.put(CustomerContextHolder.SQLSERVER, sfb3.getObject());
		targetSqlSessionFactorys.put(CustomerContextHolder.POSTGRESQL, sfb4.getObject());
		cst.setTargetSqlSessionFactorys(targetSqlSessionFactorys);
		return cst;
	}

	/**
	 * mybatis Dao扫描配置
	 * 
	 * @param customSqlSessionTemplate
	 * @return
	 */
	@Bean
	public MapperScannerConfigurer mapperScannerConfigurer(CustomSqlSessionTemplate customSqlSessionTemplate) {
		MapperScannerConfigurer msc = new MapperScannerConfigurer();
		msc.setBasePackage("com.experian.**.dao");
		msc.setSqlSessionTemplateBeanName("customSqlSessionTemplate");
		return msc;
	}

	/**
	 * pageHelper 插件
	 * 
	 * @return
	 */
	private PageHelper pageHelper() {
		PageHelper pageHelper = new PageHelper();
		Properties properties = new Properties();
		properties.setProperty("reasonable", "true");
		properties.setProperty("supportMethodsArguments", "true");
		properties.setProperty("returnPageInfo", "check");
		properties.setProperty("params", "count=countSql");
		properties.setProperty("dialect", "mysql");
		pageHelper.setProperties(properties);
		return pageHelper;
	}

}