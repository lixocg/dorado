package com.experian.daas.litigation.rest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

import com.experian.core.constant.LitiBusiConstant;
import com.experian.core.pojo.R;
import com.experian.daas.litigation.service.LitigationAdapterService;
import com.experian.daas.litigation.service.LitigationBatchAdapterService;
import com.experian.dto.pojo.litigation.LitigationAPIPojo;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiImplicitParams;
import io.swagger.annotations.ApiOperation;

@RestController
@RequestMapping("/litigation/adapter")
@Api(value = "诉讼数据清洗API")
public class LitigationAdapterRest {
	@Autowired
	private LitigationAdapterService litigationAdapterService;

	@Autowired
	private LitigationBatchAdapterService litigationBatchAdapterService;

	@ApiOperation(value = "通过详情id获取诉讼相关信息", notes = "status=0并且fetchFlag=0的数据")
	@ApiImplicitParams({
			@ApiImplicitParam(name = "detailId", value = "详情id", required = true, dataType = "string", paramType = "path", defaultValue = ""),
			@ApiImplicitParam(name = "fetchState", value = "提取状态", required = true, dataType = "int", paramType = "path", defaultValue = "0"),
			@ApiImplicitParam(name = "parsedStatus", value = "案件状态", required = true, dataType = "int", paramType = "path", defaultValue = "0") })
	@RequestMapping(value = "getAPiPojoById/{detailId}/{fetchState}/{parsedStatus}", method = RequestMethod.GET, produces = "application/json")
	public LitigationAPIPojo getAPiPojoById(@PathVariable("detailId") String detailId,
			@PathVariable("fetchState") int fetchState, @PathVariable("parsedStatus") int parsedStatus) {
		return litigationAdapterService.getAPiPojoById(detailId, fetchState, parsedStatus);
	}

	@ApiOperation(value = "单条诉讼数据进行判重")
	@RequestMapping(value = "executeAdapt", method = RequestMethod.POST)
	public R<String> executeAdapt(@RequestBody LitigationAPIPojo pojo) throws Exception {
		return new R<String>(litigationAdapterService.executeAdapt(pojo));
	}

	@ApiOperation(value = "批量判重开始")
	@ApiImplicitParam(name = "num", value = "批量数", required = true, dataType = "long", paramType = "path", defaultValue = "200")
	@RequestMapping(value = "/startDeduplicate/{num}", method = RequestMethod.GET)
	public R<Void> startDeduplicate(@PathVariable("num") long num) {
		litigationBatchAdapterService.start(num);
		return new R<Void>();
	}

	@ApiOperation(value = "批量判重结束")
	@RequestMapping(value = "/stopDeduplicate", method = RequestMethod.GET)
	public R<Void> stopDeduplicate() {
		litigationBatchAdapterService.stop();
		return new R<Void>();
	}

	@ApiOperation(value = "旧数据去重")
	@RequestMapping(value = "/oldDataDeplidate", method = RequestMethod.GET)
	public R<Void> oldDataDeplidate() {
		litigationAdapterService.oldDataDeplidate(LitiBusiConstant.DataFetchStatus.UN_FETCH,
				LitiBusiConstant.DataStatus.SUCCESS);
		return new R<Void>();
	}
}
