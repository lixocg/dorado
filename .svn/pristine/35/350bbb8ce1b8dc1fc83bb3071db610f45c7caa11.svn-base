package com.experian.daas.litigation.service.impl;

import java.util.List;

import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.util.CollectionUtils;

import com.experian.core.constant.LitiBusiConstant;
import com.experian.daas.litigation.component.rabbitmq.RabbitClient;
import com.experian.daas.litigation.service.LitigationAdapterService;
import com.experian.daas.litigation.service.LitigationMqService;
import com.experian.dto.pojo.litigation.LitigationAPIPojo;
import com.google.gson.Gson;

@Service
public class LitigationMqServiceImpl implements LitigationMqService {
	private static final Logger logger = Logger.getLogger(LitigationAdapterServiceImpl.class);

	@Autowired
	private LitigationAdapterService litigationAdapterService;

	private static Gson gson = new Gson();

	public static final int POOL_SIZE = 10;

	public static final String QUEUE_NAME_PREFIX = "litigationQueue_";
	
	@Autowired
	private RabbitClient rabbit;

	@Override
	public void produce() throws Exception {
		for (int i = 1; i < 100; i++) {
			long start = System.currentTimeMillis();
			List<LitigationAPIPojo> pojos = litigationAdapterService.getLitigationAPIPojo(i, 1000, null,
					LitiBusiConstant.DataStatus.SUCCESS);
			logger.info("查询1000条耗时：" + (System.currentTimeMillis() - start));
			if (CollectionUtils.isEmpty(pojos)) {
				break;
			}
			for (LitigationAPIPojo pojo : pojos) {
				if (pojo.getLitigationParsedDataDetail().getCourtId() == null) {
					continue;
				}
				int courtId = pojo.getLitigationParsedDataDetail().getCourtId();
				int mod = courtId % POOL_SIZE;
				String queueName = QUEUE_NAME_PREFIX + mod;
				logger.info("courtId:" + courtId + ",入队列:" + queueName);
				rabbit.sendMsg(queueName, gson.toJson(pojo));
			}
		}
	}
}
