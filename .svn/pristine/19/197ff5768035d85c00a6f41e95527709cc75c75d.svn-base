package com.experian.comp.rabbitmq;

import java.io.IOException;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

import org.apache.commons.lang3.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import com.rabbitmq.client.Channel;
import com.rabbitmq.client.Connection;
import com.rabbitmq.client.MessageProperties;

@Component
public class RabbitClient {
	private static final Logger logger = Logger.getLogger(RabbitClient.class);

	@Autowired
	public Connection connection;
	
	public static Map<String, Channel> channelMap = new ConcurrentHashMap<String, Channel>();

	public static final String SEND_TAG = "_S";
	public static final String RECEIVE_TAG = "_R";

	public void sendMsg(String queueName, String msg) {
		if (StringUtils.isEmpty(msg)) {
			return;
		}
		try {
			Channel channel = getChannel(queueName, 0);
			channel.basicPublish("", queueName, MessageProperties.TEXT_PLAIN, msg.getBytes());
		} catch (IOException e) {
			logger.error(e);
		}
	}

	public void reveiceMsg(String queueName, StringConsumer consumer) {
		try {
			Channel channel = getChannel(queueName, 1);
			channel.basicConsume(queueName, true, consumer);
		} catch (Exception e) {
			logger.error(e);
		}
	}
	
	public void deleteQueue(String queueName){
		Channel channel = getChannel(queueName, 99);
		try {
			channel.queueDelete(queueName);
		} catch (IOException e) {
			logger.error(e);
		}
	}

	private Channel getChannel(String queueName, int flag) {
		Channel channel = null;
		if (flag == 0) {
			channel = channelMap.get(queueName + SEND_TAG);
		} else if (flag == 1) {
			channel = channelMap.get(queueName + RECEIVE_TAG);
		} else {
			channel = channelMap.get(queueName);
		}
		try {
			if (channel == null) {
				channel = connection.createChannel();
				if (flag == 0) {
					channelMap.put(queueName + SEND_TAG, channel);
				} else if (flag == 1) {
					channelMap.put(queueName + RECEIVE_TAG, channel);
				} else {
					channelMap.put(queueName, channel);
				}
			}
			channel.queueDeclare(queueName, true, false, false, null);
		} catch (IOException e) {
			logger.error(e);
		}
		return channel;
	}

}
