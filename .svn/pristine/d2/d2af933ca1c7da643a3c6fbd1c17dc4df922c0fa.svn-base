package com.experian.core.rest;

import java.util.ArrayList;
import java.util.List;

import org.apache.http.Header;
import org.apache.http.client.HttpClient;
import org.apache.http.client.HttpRequestRetryHandler;
import org.apache.http.impl.client.DefaultHttpRequestRetryHandler;
import org.apache.http.impl.client.HttpClientBuilder;
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager;
import org.apache.http.message.BasicHeader;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.MediaType;
import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;
import org.springframework.http.converter.FormHttpMessageConverter;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.StringHttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.http.converter.xml.MappingJackson2XmlHttpMessageConverter;
import org.springframework.web.client.DefaultResponseErrorHandler;
import org.springframework.web.client.RestTemplate;

@Configuration
public class RestConfig {
	@Bean
	public PoolingHttpClientConnectionManager poolingHttpClientConnectionManager() {
		PoolingHttpClientConnectionManager phccm = new PoolingHttpClientConnectionManager();
		// 整个连接池的并发
		phccm.setMaxTotal(1000);
		// 每个主机的并发
		phccm.setDefaultMaxPerRoute(1000);
		return phccm;
	}

	@Bean
	public HttpClientBuilder httpClientBuilder(PoolingHttpClientConnectionManager phccm) {
		HttpClientBuilder hcb = HttpClientBuilder.create();
		hcb.setConnectionManager(phccm);
		// 开启重试，2次
		HttpRequestRetryHandler retryHandler = new DefaultHttpRequestRetryHandler(2, true);
		hcb.setRetryHandler(retryHandler);
		List<Header> defaultHeaders = new ArrayList<Header>();
		BasicHeader bh1 = new BasicHeader("User-Agent",
				"Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/31.0.1650.16 Safari/537.36");
		BasicHeader bh2 = new BasicHeader("Accept-Encoding", "gzip,deflate");
		BasicHeader bh3 = new BasicHeader("Accept-Language", "zh-CN");
		defaultHeaders.add(bh1);
		defaultHeaders.add(bh2);
		defaultHeaders.add(bh3);
		hcb.setDefaultHeaders(defaultHeaders);
		return hcb;
	}

	@Bean
	public HttpClient httpClient(HttpClientBuilder httpClientBuilder) {
		return httpClientBuilder.build();
	}

	@Bean
	public HttpComponentsClientHttpRequestFactory httpComponentsClientHttpRequestFactory(HttpClient httpClient) {
		HttpComponentsClientHttpRequestFactory hcrf = new HttpComponentsClientHttpRequestFactory(httpClient);
		//连接超时时间，毫秒
		hcrf.setConnectionRequestTimeout(5000);
		//读写超时时间，毫秒
		hcrf.setReadTimeout(200000);
		return hcrf;
	}
	
	@Bean
	public RestTemplate restTemplate(HttpComponentsClientHttpRequestFactory httpComponentsClientHttpRequestFactory) {
		RestTemplate restTemplate = new RestTemplate(httpComponentsClientHttpRequestFactory);
		restTemplate.setErrorHandler(new  DefaultResponseErrorHandler());
		List<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();
		messageConverters.add(new FormHttpMessageConverter());
		messageConverters.add(new MappingJackson2XmlHttpMessageConverter());
		messageConverters.add(new MappingJackson2HttpMessageConverter());
		StringHttpMessageConverter stringHttpMessageConverter = new StringHttpMessageConverter();
		List<MediaType> supportedMediaTypes = new ArrayList<MediaType>();
		supportedMediaTypes.add(MediaType.TEXT_PLAIN);
		stringHttpMessageConverter.setSupportedMediaTypes(supportedMediaTypes );
		messageConverters.add(stringHttpMessageConverter);
		restTemplate.setMessageConverters(messageConverters );
		return restTemplate;
	}
}